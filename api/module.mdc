---
description: 
globs: 
alwaysApply: false
---
# Module Structure Rules

When creating a new module in the application, follow these steps to properly structure it:

1. Create your new module in the `src/modules` directory with its own folder
2. Each module should have the following structure:
   ```
   module-name/
   ├── dtos/
   │   ├── create-module-name.dto.ts
   │   ├── update-module-name.dto.ts
   │   ├── search-module-name.dto.ts
   │   └── index.ts
   ├── module-name.controller.ts
   ├── module-name.service.ts
   ├── module-name.repository.ts
   └── module-name.module.ts
   ```

3. Module files should follow these conventions:
   - Use MikroORM for database operations
   - Extend EntityRepository for repositories
   - Use proper dependency injection
   - Include proper error handling
   - Follow RESTful API patterns
   - Include proper validation using class-validator
   - Use proper TypeScript types and interfaces

4. DTOs should:
   - Extend PaginationDto for search DTOs
   - Use class-validator decorators
   - Be properly exported through index.ts

5. Repository should:
   - Extend EntityRepository
   - Use EntityManager for database operations
   - Include proper filtering and pagination
   - Handle soft deletes

6. Service should:
   - Handle business logic
   - Use proper error handling
   - Return consistent response types

7. Controller should:
   - Use proper guards and decorators
   - Follow RESTful patterns
   - Use proper DTOs for request/response

8. Module file should:
   - Import all necessary dependencies
   - Configure TypeOrmModule.forFeature
   - Export necessary services

Remember to:
- Keep code organized and maintainable
- Follow existing patterns in the codebase
- Use proper error handling
- Include proper documentation
- Follow TypeScript best practices
